{"version":3,"sources":["components/contactList/ContactList.module.css","components/filter/Filter.module.css","components/contactForm/ContactForm.module.css","redux/actions.js","redux/reduser.js","redux/store.js","redux/operations.js","redux/selectors.js","components/contactForm/ContactForm.js","components/filter/Filter.js","components/contactList/ContactList.js","Phonebook.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContacts","items","createReducer","actions","type","_","payload","state","filter","element","id","loading","error","combineReducers","store","configureStore","reducer","contacts","contactsReduser","middleware","getDefaultMiddleware","concat","logger","devTools","process","axios","defaults","baseURL","getContactsItems","getContactList","createSelector","normalizedFilter","toLowerCase","contact","name","includes","ContactForm","useState","setName","number","setNumber","nameInputId","shortid","generate","numberInputId","dispatch","useDispatch","handleChange","event","target","value","console","reset","useSelector","className","s","forma","title","inputForm","pattern","required","onChange","formBtn","onClick","find","item","alert","data","post","then","catch","message","Filter","filterInput","ContactList","useEffect","a","get","map","length","contactBtn","delete","deleteContact","Phonebook","isLoading","getContactsLoading","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ff23ebc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactList_contact__i60Ka\",\"contactBtn\":\"ContactList_contactBtn__1XCXU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__GHnfH\",\"filterInput\":\"Filter_filterInput__1ULN_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forma\":\"ContactForm_forma__3eHZD\",\"title\":\"ContactForm_title__J7egm\",\"inputForm\":\"ContactForm_inputForm__1_Zor\",\"formBtn\":\"ContactForm_formBtn__1cNKk\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction('fetchContactsRequest');\nexport const fetchContactsSuccess = createAction('fetchContactsSuccess');\nexport const fetchContactsError = createAction('fetchContactsError');\n\nexport const addContactsRequest = createAction('addContactsRequest');\nexport const addContactsSuccess = createAction('addContactsSuccess');\nexport const addContactsError = createAction('addContactsError');\n\nexport const deleteContactRequest = createAction('deleteContactRequest');\nexport const deleteContactSuccess = createAction('deleteContactSuccess');\nexport const deleteContactError = createAction('deleteContactError');\n\nexport const filterContacts = createAction('filterContacts');\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\nimport * as actions from './actions';\n\nconst items = createReducer([], {\n  [actions.fetchContactsSuccess.type]: (_, { payload }) => payload,\n  [actions.addContactsSuccess.type]: (state, { payload }) => [\n    ...state,\n    payload,\n  ],\n  [actions.deleteContactSuccess.type]: (state, { payload }) =>\n    state.filter(element => element.id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.filterContacts.type]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [actions.fetchContactsRequest.type]: () => true,\n  [actions.fetchContactsSuccess.type]: () => false,\n  [actions.fetchContactsError.type]: () => false,\n  [actions.addContactsRequest.type]: () => true,\n  [actions.addContactsSuccess.type]: () => false,\n  [actions.addContactsError.type]: () => false,\n  [actions.deleteContactRequest.type]: () => true,\n  [actions.deleteContactSuccess.type]: () => false,\n  [actions.deleteContactError.type]: () => false,\n});\nconst error = createReducer('', {\n  [actions.fetchContactsError.type]: (_, { payload }) => payload,\n  [actions.addContactsError.type]: (_, { payload }) => payload,\n  [actions.deleteContactError.type]: (_, { payload }) => payload,\n  [actions.fetchContactsRequest.type]: () => null,\n  [actions.addContactsRequest.type]: () => null,\n  [actions.deleteContactRequest.type]: () => null,\n});\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n  error,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\n\nimport contactsReduser from './reduser';\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReduser,\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(logger),\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\nexport { store };\n","import axios from 'axios';\nimport * as actions from './actions';\n\naxios.defaults.baseURL = 'http://localhost:4000';\n\nexport const fetchContacts = () => async dispatch => {\n  dispatch(actions.fetchContactsRequest());\n  await axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\n    .catch(error => dispatch(actions.fetchContactsError(error.message)));\n};\n\nexport const addContact = data => dispatch => {\n  dispatch(actions.addContactsRequest());\n  axios\n    .post('/contacts', data)\n    .then(({ data }) => dispatch(actions.addContactsSuccess(data)))\n    .catch(error => dispatch(actions.addContactsError(error.message)));\n};\n\nexport const deleteContact = id => dispatch => {\n  dispatch(actions.deleteContactRequest());\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(actions.deleteContactSuccess(id)))\n    .catch(error => dispatch(actions.deleteContactError(error.message)));\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContactsItems = state => state.contacts.items;\nexport const getContactsFilter = state => state.contacts.filter;\nexport const getContactsError = state => state.contacts.error;\nexport const getContactsLoading = state => state.contacts.loading;\n\nexport const getContactList = createSelector(\n  [getContactsItems, getContactsFilter],\n  (items, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n","import shortid from 'shortid';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/operations';\nimport { getContactsItems } from '../../redux/selectors';\nimport s from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        console.error();\n        return;\n    }\n  };\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n  const contacts = useSelector(state => getContactsItems(state));\n  const handleAppend = () => {\n    if (contacts.find(item => item.name === name)) {\n      alert(`${name} is already in contacts`);\n      reset();\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    reset();\n  };\n\n  return (\n    <form className={s.forma}>\n      <p className={s.title}>Name</p>\n      <input\n        className={s.inputForm}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        value={name}\n        id={nameInputId}\n        onChange={handleChange}\n      />\n      <p className={s.title}>Number</p>\n      <input\n        className={s.inputForm}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        value={number}\n        id={numberInputId}\n        onChange={handleChange}\n      />\n      <button className={s.formBtn} type=\"button\" onClick={handleAppend}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import { useDispatch } from 'react-redux';\nimport { filterContacts } from '../../redux/actions';\nimport s from './Filter.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const onFilter = event => dispatch(filterContacts(event.target.value));\n\n  return (\n    <label className={s.filter}>\n      Find contacts by name\n      <input\n        className={s.filterInput}\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        onChange={onFilter}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact, fetchContacts } from '../../redux/operations';\nimport { getContactList } from '../../redux/selectors';\nimport { useEffect } from 'react';\nimport s from './ContactList.module.css';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContactList);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ul className={s.ContactList}>\n      {contacts.map(\n        ({ id, name, number }) =>\n          name.length > 0 &&\n          number.length > 0 && (\n            <li className={s.contact} key={id}>\n              {name}: {number}\n              <button\n                className={s.contactBtn}\n                type=\"button\"\n                onClick={() => dispatch(deleteContact(id))}\n              >\n                Delete\n              </button>\n            </li>\n          ),\n      )}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\nexport default ContactList;\n","import ContactForm from './components/contactForm';\nimport Filter from './components/filter';\nimport { useSelector } from 'react-redux';\nimport ContactList from './components/contactList';\nimport { getContactsLoading } from './redux/selectors';\n\nexport default function Phonebook() {\n  const isLoading = useSelector(state => getContactsLoading(state));\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && <p>{' Loading... '}</p>}\n      <ContactList />\n    </div>\n  );\n}\n","import Phonebook from './Phonebook';\n\nfunction App() {\n  return (\n    <>\n      <Phonebook />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}